// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoteTableExec {
    #[prost(message, optional, tag = "1")]
    pub conn_options: ::core::option::Option<ConnectionOptions>,
    #[prost(string, tag = "2")]
    pub sql: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub table_schema: ::core::option::Option<::datafusion_proto::protobuf::Schema>,
    #[prost(message, optional, tag = "4")]
    pub projection: ::core::option::Option<Projection>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub transform: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionOptions {
    #[prost(oneof = "connection_options::ConnectionOptions", tags = "1, 2, 3, 4")]
    pub connection_options: ::core::option::Option<connection_options::ConnectionOptions>,
}
/// Nested message and enum types in `ConnectionOptions`.
pub mod connection_options {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ConnectionOptions {
        #[prost(message, tag = "1")]
        Postgres(super::PostgresConnectionOptions),
        #[prost(message, tag = "2")]
        Mysql(super::MysqlConnectionOptions),
        #[prost(message, tag = "3")]
        Oracle(super::OracleConnectionOptions),
        #[prost(message, tag = "4")]
        Sqlite(super::SqliteConnectionOptions),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PostgresConnectionOptions {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub port: u32,
    #[prost(string, tag = "3")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub password: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "5")]
    pub database: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MysqlConnectionOptions {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub port: u32,
    #[prost(string, tag = "3")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub password: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "5")]
    pub database: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OracleConnectionOptions {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub port: u32,
    #[prost(string, tag = "3")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub password: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub service_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqliteConnectionOptions {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Projection {
    #[prost(uint32, repeated, tag = "1")]
    pub projection: ::prost::alloc::vec::Vec<u32>,
}
